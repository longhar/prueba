openapi: 3.0.3
info:
  title: Ejercicio 1 - AOS
  version: 1.0.0
  description: Ejercicio de especificación en `OpenAPI`
servers:
  - url: '{schema}://{servername}:{port}/api/v1'
    description: 'AOS Server practica 1'
    variables:
      schema:
        enum:
          - http
          - https
        default: http
      servername:
        default: localhost
      port:
        default: '80'
tags:
  - name: Productos
    description: Gestión de Productos
  - name: Categorias
    description: Gestion de Categorias
  - name: Búsqueda
    description: Búsqueda de de productos por categoría y nombre
  - name: Listado
    description: Listado de productos por categoría y nombre
paths:
  /Productos:
    post:
      operationId: api_Producto_post
      tags:
        - Productos
      summary: Introduce un Producto
      description: Introduce la información de un Producto identificado por `id` si no existía ya
      requestBody:
        description: Información del Producto
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Producto'
      responses:
        '200':
           $ref: '#/components/responses/respuesta200'
        '400':
           $ref: '#/components/responses/respuesta400'
        '409':
           $ref: '#/components/responses/respuesta409'
  '/Productos/{id}':
    delete:
      operationId: api_Producto_delete
      tags:
        - Productos
      summary: Elimina un Producto
      description: Elimina la información del Producto identificado por `id`
      parameters:
        -  $ref: '#/components/parameters/id'
      responses:
        '204':
          description: '<El cuerpo de la respuesta está vacío>'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mensaje'
        '404':
           $ref: '#/components/responses/respuesta404'
    put:
      operationId: api_Producto_put
      tags:
        - Productos
      summary: Introduce un Producto
      description: Introduce o reemplaza la información de un Producto identificado por `id`
      parameters:
        - $ref:  '#/components/parameters/id'
      requestBody:
        description: Información del Producto
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/Producto'
      responses:
        '200':
              $ref: '#/components/responses/respuesta200'
        '400':
              $ref: '#/components/responses/respuesta400'
        '404':
              $ref: '#/components/responses/respuesta404'
        '422':
              $ref: '#/components/responses/respuesta422'
           
  /Categorias:
    post:
      operationId: api_Categoria_post
      tags:
        - Categorias
      summary: Introduce una Categoria
      description: Introduce la información de una Categoria identificada por `id` si no existía ya
      requestBody:
        description: Información de la Categoria
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Categoria/properties/categoria'
      responses:
        '200':
             $ref: '#/components/responses/respuesta200'
        '409':
              $ref: '#/components/responses/respuesta409'
             
        '501':
              $ref: '#/components/responses/respuesta502'
           
        '502':
              $ref: '#/components/responses/respuesta502'
  '/Categorias/{idCategoria}':
    delete:
      operationId: api_Categoria_delete
      tags:
        - Categorias
      summary: Elimina una Categoria
      description: Elimina la información de la Categoria identificada por `id`
      parameters:
         - $ref: '#/components/parameters/idCategoria'
      responses:
        '204':
                $ref: '#/components/schemas/Mensaje'
        '502':
                $ref: '#/components/responses/respuesta502'
    
    put:
      operationId: api_Categoria_put
      tags:
        - Categorias
      summary: Introduce un Producto
      description: Introduce o reemplaza la información de una Categoria identificada por `id`
      parameters:
              - $ref: '#/components/parameters/idCategoria'
      requestBody:
        description: Información de la Categoria
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Categoria'
      responses:
        '200':
          $ref: '#/components/responses/respuesta200'
        '422':
          $ref: '#/components/responses/respuesta422'
        '501':
          $ref: '#/components/responses/respuesta501'
        '502':
          $ref: '#/components/responses/respuesta502'
  '/Productos/categoria/{idCategoria}':
    get:
      operationId: api_Producto_get_lista
      tags:
        - Búsqueda
      summary: Obtiene una lista de productos
      description: Obtiene la lista de productos de la categoría solicitada
      parameters:
            - $ref: '#/components/parameters/idCategoria'
      responses:
        '200':
          description: Información del producto
          content:
            application/json:
              schema:
                  $ref: '#/components/responses/respuesta200'
          headers:
            ETag:
              description: Entity Tag (Identificador único utilizado para la validación del caché)
              example: 'W/"xy", "5", "7da7a728-f910-11e6-942a-68f728c1ba70"'
              required: false
              schema:
                type: string
        '404':
          $ref: '#/components/responses/respuesta404'
            
  '/Productos/query/{query}':
    get:
      operationId: api_Producto_get_Nombre
      tags:
        - Listado
      summary: Obtiene un Producto
      description: Obtiene la información del Producto identificado
      parameters:
         - $ref: '#/components/parameters/query'

      responses:
        '200':
          description: Información del Producto
          content:
            application/json:
              schema:
                  $ref: '#/components/responses/respuesta200'
          headers:
            ETag:
              description: Entity Tag (Identificador único utilizado para la validación del caché)
              example: 'W/"xy", "5", "7da7a728-f910-11e6-942a-68f728c1ba70"'
              required: false
              schema:
                type: string
        '404':
          description: Producto no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/responses/respuesta404'

components:
  schemas:
    Producto:
      title: Producto
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456789
          minimum: 1
        descripcion:
          type: string
        categoria:
          title: Categoria
          type: object
          x-examples:
            ejemplo-1:
              categoria:
                descripcion: Material informático
                idCategoriaategoria: 12
          properties:
            categoria:
              type: object
              properties:
                idCategoria:
                  type: integer
                  format: int64
                  example: 123456789
                  minimum: 1
                descripcion:
                  type: string
      example:
        Producto:
          idProducto: 2020
          descripcion: Monitor 21 pulgadas
          categoria:
            descripcion: Material informático
            idCategoriaategoria: 12
    Mensaje:
      description: Mensaje de respuesta
      type: object
      properties:
        code:
          type: integer
          description: Código de respuesta
        message:
          type: string
          description: Mensaje de respuesta
      example:
        code: 200
        message: Ok
    Categoria:
      title: Categoria
      type: object
      x-examples:
        ejemplo-1:
          categoria:
            descripcion: Material informático
            idCategoriaategoria: 12
      properties:
        categoria:
          type: object
          properties:
            idCategoria:
              type: integer
              format: int64
              example: 123456789
              minimum: 1
            descripcion:
              type: string
  headers:
    ETag:
      description: Entity Tag (Identificador único utilizado para la validación del caché)
      example: 'W/"xy", "5", "7da7a728-f910-11e6-942a-68f728c1ba70"'
      required: false
      schema:
        type: string
    Allow:
      description: Devuelve una cabecera de tipo Allow con la lista de métodos soportados separados por comas
      required: false
      schema:
        type: string
  parameters:
    query:
      name: query
      in: path
      required: true
      content:
        application/json:
          schema:
            type: string
    idCategoria:
      name: idCategoria
      in: path
      required: true
      content:
        application/json:
          schema:
            type: integer
            format: int64
            example: 123456789
            minimum: 1
    id:
      name: id
      in: path
      required: true
      content:
        application/json:
          schema:
            type: integer
            format: int64
            example: 123456789
            minimum: 1
  responses:
    respuesta200:
      description: Producto ya existe
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Mensaje'
          example:
            code: 200
            message: 'Todo OK'
    respuesta409:
       description:  Id existente
       content:    
        application/json:
          schema:
            $ref: '#/components/schemas/Mensaje'
          example:
            code: 409
            message: La información del identificada por `id` ya existe en el servidor
    respuesta400:
      description: Producto ya existe
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Mensaje'
          example:
            code: 400
            message: 'Solicitud errónea, el nombre del Producto ya existe.'
    respuesta404:
      description: Producto no encontrado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Mensaje'
          example:
            code: 404
            message: No encontrado
    respuesta422:
      description: Producto ya existe
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Mensaje'
          example:
            code: 422
            message: 'Falta el nombre del Producto'
    respuesta501:
      description: Categoria ya existente
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Mensaje'
          example:
            code: 501
            message: 'Error, ya existe dicha categoria'
    respuesta502:
      description: Categoria no encontrada
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Mensaje'
          example:
            code: 502
            message: no encontrado
